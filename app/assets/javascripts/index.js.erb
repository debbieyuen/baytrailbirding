// ESLINT:
/* global L, moment, $ */

'use strict';

const MAX_RADIUS = 50;	// Radius distance in miles

class Unit {
	static mi2km = mi => mi * 1.609;
	static mi2m = mi => this.mi2km(mi) * 1000;
	static km2mi = km => km / 1.609;
	static m2mi = m => this.km2mi(m * 1000);
}

class Ebird {
	static getBirds(lat, lng, radius) {
		const request = {
			url: '/ebird',
			method: 'GET',
			timeout: 0,
			data: {
				lat,
				lng,
				radius
			}
		};

		return new Promise(resolve => {
			$.ajax(request).done(birds => {
				birds.forEach(bird => {
					bird.obs.date = new Date(bird.obs.date);
					bird.loc.latLng = L.latLng(bird.loc.lat, bird.loc.lng);
				});
				resolve(birds);
			});
		});
	}
}

class BirdMap {
	constructor(elementId, currentPosition) {
		const createIcon = iconUrl => new L.Icon({
			iconUrl,
			shadowUrl: '<%= image_path "map/marker-shadow.png" %>',
			iconSize: [25, 41],
			iconAnchor: [12, 41],
			popupAnchor: [1, -34],
			shadowSize: [41, 41]
		});

		const tileLayerSource = 'https://a.tiles.mapbox.com/styles/v1/lohneswright/ciocejooj006obdnjhmd2x9qp/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibG9obmVzd3JpZ2h0IiwiYSI6IngzbVlqNnMifQ.OwxjrBKoGXc60NB5x6GKzw';

		const greenIcon = createIcon('<%= image_path "map/marker-icon-green.png" %>');
		const blueIcon = createIcon('<%= image_path "map/marker-icon-blue.png" %>');
		const yellowIcon = createIcon('<%= image_path "map/marker-icon-yellow.png" %>');
		
		const map = L.map(elementId).setView([37.42, -121.91], 13);
		
		L.tileLayer(tileLayerSource, { maxZoom: 22 }).addTo(map);
	
		const legend = L.control({ position: 'topright' });
		legend.onAdd = () => {
			const div = L.DomUtil.create('div', 'legend');
			div.innerHTML = `
				<img src="<%= image_path "map/marker-icon-2x-green.png" %>" height=41 width=25>
				Your Location
				<br>
				<img src="<%= image_path "map/marker-icon-2x-gold.png" %>" height=41 width=25>
				Bird-Watching Park
				<br>
				<img src="<%= image_path "map/marker-icon-2x-blue.png" %>" height=41 width=25>
				Recent Bird Sighting
			`;
			div.style.background = 'silver';
			return div;
		}
		legend.addTo(map);
	
		this.map = map;

		this.icons = {
			greenIcon,
			yellowIcon,
			blueIcon
		};

		this.position = currentPosition;
		this.map.panTo(currentPosition);

		const km = MAX_RADIUS * 1000;

		const m = Math.floor(km * Math.sqrt(2));

		const bounds = currentPosition.toBounds(m);

		this.map.once('moveend', () => {
			this.map.setMinZoom(this.map.getZoom());

			this.markers = L.markerClusterGroup();
	
			this.selected = null;
	
			this.map.on('moveend', () => this.loadBirds());
	
			this.map.addLayer(this.markers);
	
			this.loadBirds();
		});

		this.map.fitBounds(bounds);
	}

	async loadBirds() {
		const { lat, lng } = this.getCurrPosition();
		const birds = await Ebird.getBirds(lat, lng, this.getRadius());
		const bounds = this.map.getBounds();
		const markers = birds
			.filter(bird => bounds.contains(bird.loc.latLng))
			.map(bird => this.createBird(bird.loc.latLng, bird));

		markers.forEach(marker => {
			const alreadyExists = this.markers.getLayers().find(mapMarker => mapMarker.birdId === marker.birdId)
			if (!alreadyExists) this.markers.addLayer(marker);
		});
	}

	createMarker(latLng, icon) {
		const marker = L.marker(latLng, { icon });
		
		marker.on('click', () => {
			const position = marker.getLatLng();
			this.setCurrPosition(position);
		});

		return marker;
	}

	createBird(latLng, bird) {
		const icon = this.icons.blueIcon;

		const marker = this.createMarker(latLng, icon);

		marker.birdId = bird.subId

		marker.on('click', () => {
			console.log(bird);
		});

		return marker;
	}

	setCurrPosition(latLng) {
		this.map.panTo(latLng);
	}
	
	getCurrPosition() {
		return this.map.getCenter();
	}
	
	getRadius() {
		const bounds = this.map.getBounds();
		const ne = bounds.getNorthEast();
		const nw = bounds.getNorthWest();
		const m = nw.distanceTo(ne);
		const km = m / 1000;
		const r = Math.min(Math.ceil(km / Math.sqrt(2)), MAX_RADIUS);

		return r;
	}
}

class GPS {

	constructor() {
		this.watchId = null;
	}

	getCurrentPosition(defaultLat, defaultLng) {
		const defaultPosition = L.latLng(defaultLat, defaultLng);
		
		const options = {
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 0
		};

		return new Promise(resolve => {
			navigator.geolocation.getCurrentPosition(
				position => {
					const { coords } = position;
					const { latitude, longitude } = coords;
					
					resolve(L.latLng(latitude, longitude));
				},
				() => resolve(defaultPosition),
				options
			);
		});
 	}
	watchCurrentPosition(onPosChange) {
		const defaultPosition = L.latLng(defaultLat, defaultLng);

		const options = {
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 0
		};

		const watchId = navigator.geolocation.watchPosition(
			position => {
				const { coords } = position;
				const { latitude, longitude } = coords;
				
				onPosChange(L.latLng(latitude, longitude));
			},
			() => onPosChange(defaultPosition),
			options
		);
		this.watchId = watchId;

		return watchId;
	}

	clearWatchCurrentPosition() {
		if (!this.watchId) throw new Error('Not currently watching position');

		navigator.geolocation.clearWatch(this.watchId);

		this.watchId = null;
	}
}

let mymap = null;
let gps = null;

window.addEventListener('load', async () => {

	gps = new GPS();
	mymap = new BirdMap('leaflet-map', await gps.getCurrentPosition(37.8039, -122.2591));

});
