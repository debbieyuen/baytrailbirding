// ESLINT:
/* global L, moment, $ */

'use strict';

const MAX_RADIUS = 50;	// Radius distance in miles

const Unit = {
	mi2km: mi => mi * 1.609,
	mi2m: mi => Unit.mi2km(mi) * 1000,
	km2mi: km => km / 1.609,
	m2mi: m => Unit.km2mi(m / 1000)
};

class API {
	static get(url, data) {
		const request = {
			method: 'GET',
			url,
			data
		};

		return new Promise(resolve => {
			$.ajax(request).done(data => resolve(data));
		});
	}
}

class Hotspot {
	constructor(hotspot) {
		Object.assign(this, JSON.parse(JSON.stringify(hotspot)));
		this.obs.date = new Date(this.obs.date);
		this.loc.latLng = L.latLng(this.loc.lat, this.loc.lng);
	}

	static from(hotspot) {
		return new Hotspot(hotspot);
	}
}

class Bird {
	constructor(bird) {
		Object.assign(this, JSON.parse(JSON.stringify(bird)));
		this.obs.date = new Date(this.obs.date);
		this.loc.latLng = L.latLng(this.loc.lat, this.loc.lng);
	}

	static from(bird) {
		return new Bird(bird);
	}
}

class Ebird {
	static async getBirds(lat, lng, radius, hotspot = undefined) {
		const url = '/ebird/birds';
		const data = {
			lat,
			lng,
			radius,
			hotspot
		};

		const birds = await API.get(url, data);

		return birds.map(Bird.from);
	}

	static async getHotspots(lat, lng, radius) {
		const url = '/ebird/hotspots';
		const data = {
			lat,
			lng,
			radius
		};

		const hotspots = await API.get(url, data);

		return hotspots.map(Hotspot.from);
	}
}

class BirdMap {
	constructor(elementId, currentPosition) {
		const tileLayerSource = 'https://a.tiles.mapbox.com/styles/v1/lohneswright/ciocejooj006obdnjhmd2x9qp/tiles/{z}/{x}/{y}?access_token={accessToken}';

		const map = L.map(elementId).setView([37.42, -121.91], 13);

		L.tileLayer(tileLayerSource, {
			maxZoom: 22,
			accessToken: 'pk.eyJ1IjoibG9obmVzd3JpZ2h0IiwiYSI6IngzbVlqNnMifQ.OwxjrBKoGXc60NB5x6GKzw',
			attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
		}).addTo(map);

		this.map = map;

		this.setUserPosition(currentPosition);

		this.map.panTo(currentPosition);

		const km = MAX_RADIUS * 1000;

		const m = Math.floor(km * Math.sqrt(2));

		const bounds = currentPosition.toBounds(m);

		this.map.once('moveend', () => {
			this.map.setMinZoom(this.map.getZoom());

			this.birds = L.markerClusterGroup();
			this.hotspots = L.markerClusterGroup();
			this.locations = L.markerClusterGroup();

			this.markers = L.layerGroup([this.birds, this.hotspots, this.locations]);

			this.markers.on('clusterclick', () => {
				if (this.selected) this.selected.setIcon(this.selected.defaultIcon);
				$('.overlay').attr('hidden', '');
			});

			this.selected = null;

			this.map.on('moveend', () => {
				this.load();
			});

			this.map.addLayer(this.markers);

			this.load();
		});

		this.map.fitBounds(bounds);
	}

	async getBirds() {
		const { lat, lng } = this.getCurrPosition();
		const birds = await Ebird.getBirds(lat, lng, this.getRadius());
		const bounds = this.map.getBounds();
		const markers = birds
			.filter(bird => bounds.contains(bird.loc.latLng))
			.map(bird => this.createBird(bird))
			.filter(birdMarker => !this.hotspots.getLayers().find(hotspotMarker => hotspotMarker.getLatLng().equals(birdMarker.getLatLng())));

		return markers;
	}

	async getHotspots() {
		const { lat, lng } = this.getCurrPosition();
		const hotspots = await Ebird.getHotspots(lat, lng, this.getRadius());
		const bounds = this.map.getBounds();
		const markers = hotspots
			.filter(hotspot => bounds.contains(hotspot.loc.latLng))
			.map(hotspot => this.createHotspot(hotspot));

		return markers;
	}

	async getLocations() {
		// TODO: Add locations
	}

	createMarker(latLng, customId, icon, selectedIcon) {
		const marker = L.marker(latLng, {
			icon,
			riseOnHover: true
		});

		marker.defaultIcon = icon;
		marker.selectedIcon = selectedIcon;
		marker.customId = customId;

		marker.on('click', () => {
			const position = marker.getLatLng();
			if (this.selected) this.selected.setIcon(this.selected.defaultIcon);
			this.selected = marker;
			this.selected.setIcon(selectedIcon);
			this.setCurrPosition(position);
		});

		return marker;
	}

	createBird(bird) {
		const { latLng } = bird.loc;

		const icon = L.divIcon({
			html: '<i class="fa-solid fa-dove fa-2x"></i>',
			iconSize: [20, 20],
			className: 'bird-icon'
		})

		const selectedIcon = L.divIcon({
			html: '<i class="fa-solid fa-dove fa-2x"></i>',
			iconSize: [20, 20],
			className: 'bird-icon-selected'
		});

		const marker = this.createMarker(latLng, bird.subId, icon, selectedIcon);

		marker.on('click', () => {
			$('.overlay')
				.html(`
					<div class="expand-icon"></div>
					<div class="content">
						<div class="bird-name">${bird.name.com}</div>
						<div class="science-name">${bird.name.sci}</div>
						<div class="bird-img-wrapper">
							<img class="bird-img" src="/duck.png">
						</div>
						<div class="location-wrapper">
							<div class="location">Loc</div>
							<div class="separator"><i class="fa-solid fa-circle"></i></div>
							<div class="distance">${Unit.m2mi(marker.getLatLng().distanceTo(this.getUserPosition())).toFixed(2)} mi</div>
						</div>
						<div class="description-wrapper">
							<div class="description-header">Description:</div>
							<div class="description-content">No Description Available</div>
					</div>
					</div>
				`)
				.removeAttr('hidden');
		});

		return marker;
	}

	createHotspot(hotspot) {
		const { latLng } = hotspot.loc;

		const icon = L.divIcon({
			html: '<i class="fa-solid fa-binoculars fa-2x"></i>',
			iconSize: [20, 20],
			className: 'hotspot-icon'
		});

		const selectedIcon = L.divIcon({
			html: '<i class="fa-solid fa-binoculars fa-2x"></i>',
			iconSize: [20, 20],
			className: 'hotspot-icon-selected'
		});

		const marker = this.createMarker(latLng, hotspot.loc.id, icon, selectedIcon);

		marker.on('click', () => {
			console.log('TODO');
		});

		return marker;
	}

	createLocation(location) {
		// TODO
	}

	async load() {
		const hotspots = await this.getHotspots();
		this.locations.insert(...hotspots);

		const birds = await this.getBirds();
		this.birds.insert(...birds);
	}

	setCurrPosition(latLng) {
		this.map.panToOffset(latLng, [window.innerWidth / 4, 0]);
	}

	getCurrPosition() {
		return this.map.getCenter();
	}

	setUserPosition(latLng) {
		if (!this.position) {
			const icon = L.divIcon({
				html: '<i class="fa-solid fa-street-view fa-3x"></i>',
				iconSize: [20, 20],
				className: 'user-icon'
			});

			const marker = L.marker(latLng, {
				icon,
				riseOnHover: true
			});
			this.position = marker;

			console.log(this.position);

			this.map.addLayer(this.position);

			console.log('Nice');
		}
		this.position.setLatLng(latLng);
	}

	getUserPosition() {
		return this.position.getLatLng();
	}

	getRadius() {
		const bounds = this.map.getBounds();
		const ne = bounds.getNorthEast();
		const nw = bounds.getNorthWest();
		const m = nw.distanceTo(ne);
		const km = m / 1000;
		const r = Math.min(Math.ceil(km / Math.sqrt(2)), MAX_RADIUS);

		return r;
	}
}

class GPS {
	constructor() {
		this.watchId = null;
	}

	getCurrentPosition(defaultLat, defaultLng) {
		const defaultPosition = L.latLng(defaultLat, defaultLng);

		const options = {
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 0
		};

		return new Promise(resolve => {
			navigator.geolocation.getCurrentPosition(
				position => {
					const {
						coords
					} = position;
					const {
						latitude, longitude
					} = coords;

					resolve(L.latLng(latitude, longitude));
				},
				() => resolve(defaultPosition),
				options
			);
		});
	}

	watchCurrentPosition(onPosChange) {
		const defaultPosition = L.latLng(defaultLat, defaultLng);

		const options = {
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 0
		};

		const watchId = navigator.geolocation.watchPosition(
			position => {
				const {
					coords
				} = position;
				const {
					latitude, longitude
				} = coords;

				onPosChange(L.latLng(latitude, longitude));
			},
			() => onPosChange(defaultPosition),
			options
		);
		this.watchId = watchId;

		return watchId;
	}

	clearWatchCurrentPosition() {
		if (!this.watchId) throw new Error('Not currently watching position');

		navigator.geolocation.clearWatch(this.watchId);

		this.watchId = null;
	}
}

let mymap = null;
let gps = null;

window.addEventListener('load', async () => {
	L.Map.prototype.panToOffset = function(latlng, offset, options) {
		const x = this.latLngToContainerPoint(latlng).x - offset[0];
		const y = this.latLngToContainerPoint(latlng).y - offset[1];
		const point = this.containerPointToLatLng([x, y]);
		return this.setView(point, this.getZoom(), {
			pan: options
		});
	};
	L.LayerGroup.prototype.insert = function(...layers) {
		return layers.map(layer => {
			if (this.getLayers().find(currLayer => currLayer.customId === layer.customId)) return null;
			return this.addLayer(layer);
		});
	};

	gps = new GPS();
	mymap = new BirdMap('leaflet-map', await gps.getCurrentPosition(37.8039, -122.2591));
});
